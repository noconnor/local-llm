diff --git a/README.md b/README.md
index 6a7c275..62b592a 100644
--- a/README.md
+++ b/README.md
@@ -5,4 +5,13 @@
 [status-image]: https://screwdriver.ouroath.com/pipelines/1063842/badge
 [status-url]: https://screwdriver.ouroath.com/pipelines/1063842
 
-Repo for device atlas download lambda code
\ No newline at end of file
+Repo for device atlas download lambda code
+
+## Running unittests
+
+```shell
+python -m venv env
+. env/bin/activate
+pip install -r requirements.txt
+cd test && python -m unittest -v test_deviceatlas_download.py; cd ..
+```
\ No newline at end of file
diff --git a/src/deviceatlas_download.py b/src/deviceatlas_download.py
index c5fae40..4bc7dfd 100644
--- a/src/deviceatlas_download.py
+++ b/src/deviceatlas_download.py
@@ -80,7 +80,7 @@ def save_file(file_name: str, data_bytes: bytes, bucket, timestamp: str):
     target_path = os.path.join("techno/", timestamp, file_name)
     location = os.path.join("s3://", bucket.name, target_path)
     print("Publishing {} ...".format(location))
-    bucket.put_object(data_bytes, target_path, ExtraArgs={"ServerSideEncryption": "AES256"})
+    bucket.put_object(Body=data_bytes, Key=target_path, ServerSideEncryption="AES256")
     print("Published {}".format(location))
     return location
 
diff --git a/test/test_deviceatlas_download.py b/test/test_deviceatlas_download.py
index 5aa6c9d..a04d0f3 100644
--- a/test/test_deviceatlas_download.py
+++ b/test/test_deviceatlas_download.py
@@ -52,9 +52,9 @@ class TestDeviceAtlasDownload(unittest.TestCase):
         dd.save_file("devices.json", data_bytes, bucket, "20231211")
 
         bucket.put_object.assert_called_with(
-            data_bytes,
-            "techno/20231211/devices.json",
-            ExtraArgs={"ServerSideEncryption": "AES256"}
+            Body=data_bytes,
+            Key="techno/20231211/devices.json",
+            ServerSideEncryption="AES256"
         )
 
     def test_extract_json_data(self):
@@ -76,22 +76,21 @@ class TestDeviceAtlasDownload(unittest.TestCase):
         with patch('deviceatlas_download.urlopen',  urlopen):
             dd.download(secrets, bucket, timestamp)
 
-        sse = {"ServerSideEncryption": "AES256"}
         bucket.put_object.assert_has_calls([
-            call(ANY, "techno/20231212/devices.v3.json", ExtraArgs=sse),
-            call(ANY, "techno/20231212/devices.v3.json.md5", ExtraArgs=sse),
-            call(ANY, "techno/20231212/devices.json", ExtraArgs=sse),
-            call(ANY, "techno/20231212/devices.json.md5", ExtraArgs=sse),
-            call(ANY, "techno/20231212/_DONE", ExtraArgs=sse),
-            call(ANY, "techno/20231212/_S3_DONE", ExtraArgs=sse)
+            call(Body=ANY, Key="techno/20231212/devices.v3.json", ServerSideEncryption="AES256"),
+            call(Body=ANY, Key="techno/20231212/devices.v3.json.md5", ServerSideEncryption="AES256"),
+            call(Body=ANY, Key="techno/20231212/devices.json", ServerSideEncryption="AES256"),
+            call(Body=ANY, Key="techno/20231212/devices.json.md5", ServerSideEncryption="AES256"),
+            call(Body=ANY, Key="techno/20231212/_DONE", ServerSideEncryption="AES256"),
+            call(Body=ANY, Key="techno/20231212/_S3_DONE", ServerSideEncryption="AES256")
         ])
 
-        self.assertEqual(len(bucket.put_object.call_args_list[0][0][0]), 34)  # mock devices.v3.json file
-        self.assertEqual(bucket.put_object.call_args_list[1][0][0], b'b5b963e56c8aae8e529d892878baabc6')  # md5
-        self.assertEqual(len(bucket.put_object.call_args_list[2][0][0]), 15990566)  # full devices.json file
-        self.assertEqual(bucket.put_object.call_args_list[3][0][0], b'9c439c7aad36855343c8dd3b9927146e')  # md5
-        self.assertEqual(bucket.put_object.call_args_list[4][0][0], b'')  # empty marker
-        self.assertEqual(bucket.put_object.call_args_list[5][0][0], b'')  # empty marker
+        self.assertEqual(len(bucket.put_object.call_args_list[0][1]['Body']), 34)  # mock devices.v3.json file
+        self.assertEqual(bucket.put_object.call_args_list[1][1]['Body'], b'b5b963e56c8aae8e529d892878baabc6')  # md5
+        self.assertEqual(len(bucket.put_object.call_args_list[2][1]['Body']), 15990566)  # full devices.json file
+        self.assertEqual(bucket.put_object.call_args_list[3][1]['Body'], b'9c439c7aad36855343c8dd3b9927146e')  # md5
+        self.assertEqual(bucket.put_object.call_args_list[4][1]['Body'], b'')  # empty marker
+        self.assertEqual(bucket.put_object.call_args_list[5][1]['Body'], b'')  # empty marker
 
     def _read_resource(self, name):
         dir_path = os.path.dirname(os.path.realpath(__file__))
